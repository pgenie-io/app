
name: Release

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  resolve-metadata:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.resolve-version.outputs.version}}
    steps:
      - uses: actions/checkout@v3
      - id: find-cabal
        run: |
          files=(*.cabal)
          if [ "${#files[@]}" -ne 1 ]
          then
            echo "More than 1 cabal file"
            exit 1
          fi
          file=${files[0]}
          echo "::set-output name=file::$file"
      - id: resolve-version
        run: |
          tag="${GITHUB_REF##*/}"
          cabal_version="$(grep -oP '^version:\s*\K.*' ${{steps.find-cabal.outputs.file}})"

          if [[ "$tag" -eq "dev" ]]
          then
            echo "No tag is specified. Using version from Cabal and marking it \"dev\"."
            echo "::set-output name=version::$cabal_version-dev"
          elif [ "$tag" != "v$cabal_version" ]
          then
            echo "Tagged version ($tag) does not match the one in ${{steps.find-cabal.outputs.file}} (v$cabal_version)"
            exit 1
          else
            echo "Version to be released is $cabal_version"
            echo "::set-output name=version::$cabal_version"
          fi

  build-linux-artifact:
    runs-on: ubuntu-latest
    needs: resolve-metadata
    env:
      ARTIFACT: artifact/pgenie-client-app-v${{ needs.resolve-metadata.outputs.version }}-linux-x64.tar.xz
    steps:
      - uses: actions/checkout@v3
      - uses: haskell/actions/setup@v2
        with:
          enable-stack: true
          stack-version: 2.7.5
          stack-no-global: true
      - uses: actions/cache@v3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**.cabal') }}
          restore-keys: ${{ runner.os }}-
      - run: stack build --local-bin-path artifact --copy-bins
      - run: tar cJvf "$ARTIFACT" -C artifact pgn
      - uses: actions/upload-artifact@v3
        with:
          name: linux-x64
          path: ${{env.ARTIFACT}}
          if-no-files-found: error

  build-macos-artifact:
    runs-on: macos-latest
    needs: resolve-metadata
    env:
      ARTIFACT: artifact/pgenie-client-app-v${{ needs.resolve-metadata.outputs.version }}-macos-x64.tar.xz
    steps:
      - uses: actions/checkout@v3
      - uses: haskell/actions/setup@v2
        with:
          enable-stack: true
          stack-version: 2.7.5
          stack-no-global: true
      - uses: actions/cache@v3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**.cabal') }}
          restore-keys: ${{ runner.os }}-
      - run: stack build --local-bin-path artifact --copy-bins
      - run: tar cJvf "$ARTIFACT" -C artifact pgn
      - uses: actions/upload-artifact@v3
        with:
          name: macos-x64
          path: ${{env.ARTIFACT}}
          if-no-files-found: error
  
  build-windows-artifact:
    runs-on: windows-latest
    needs: resolve-metadata
    env:
      ARTIFACT: artifact/pgenie-client-app-v${{ needs.resolve-metadata.outputs.version }}-windows-x64.zip
    steps:
      - uses: actions/checkout@v3
      - uses: haskell/actions/setup@v2
        with:
          enable-stack: true
          stack-version: 2.7.5
          stack-no-global: true
      - uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Roaming\stack
            ~\AppData\Local\Programs\stack
            .stack-work
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**.cabal') }}
          restore-keys: ${{ runner.os }}-
      - run: stack build --local-bin-path artifact --copy-bins
      - uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: ${{env.ARTIFACT}}
          path: artifact/pgn.exe
      - uses: actions/upload-artifact@v3
        with:
          name: windows-x64
          path: ${{env.ARTIFACT}}
          if-no-files-found: error

  release:
    needs:
      - resolve-metadata
      - build-linux-artifact
      - build-macos-artifact
      - build-windows-artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: linux-x64
          path: artifact
      - uses: actions/download-artifact@v2
        with:
          name: macos-x64
          path: artifact
      - uses: actions/download-artifact@v2
        with:
          name: windows-x64
          path: artifact
      - name: Create Github release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload assets to Github release
        uses: xresloader/upload-to-github-release@v1.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "artifact/*"
          tag_name: ${{ needs.resolve-metadata.outputs.version }}
          draft: false
          prerelease: false
          overwrite: false
